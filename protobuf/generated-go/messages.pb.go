// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package statusMessagesProtobuf is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	StatusMessage
	PlannerInfo
	SystemStatus
	NetworkStatus
	PlannerStatus
	ServiceStatus
	NetworkInterface
	StatusKvPair
	ControlMessage
*/
package statusMessagesProtobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusMessage struct {
	// for the initial message, high number, we only send this upon initialization
	// of the connection (identifiers 1-15 use 1 byte, 16-2047 2 bytes)
	PlannerInfo *PlannerInfo `protobuf:"bytes,2048,opt,name=plannerInfo" json:"plannerInfo,omitempty"`
	// any subsequent message should contain only one of the following:
	SystemStatus  *SystemStatus  `protobuf:"bytes,1,opt,name=systemStatus" json:"systemStatus,omitempty"`
	NetworkStatus *NetworkStatus `protobuf:"bytes,2,opt,name=networkStatus" json:"networkStatus,omitempty"`
	PlannerStatus *PlannerStatus `protobuf:"bytes,3,opt,name=plannerStatus" json:"plannerStatus,omitempty"`
	ServiceStatus *ServiceStatus `protobuf:"bytes,4,opt,name=serviceStatus" json:"serviceStatus,omitempty"`
}

func (m *StatusMessage) Reset()                    { *m = StatusMessage{} }
func (m *StatusMessage) String() string            { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()               {}
func (*StatusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StatusMessage) GetPlannerInfo() *PlannerInfo {
	if m != nil {
		return m.PlannerInfo
	}
	return nil
}

func (m *StatusMessage) GetSystemStatus() *SystemStatus {
	if m != nil {
		return m.SystemStatus
	}
	return nil
}

func (m *StatusMessage) GetNetworkStatus() *NetworkStatus {
	if m != nil {
		return m.NetworkStatus
	}
	return nil
}

func (m *StatusMessage) GetPlannerStatus() *PlannerStatus {
	if m != nil {
		return m.PlannerStatus
	}
	return nil
}

func (m *StatusMessage) GetServiceStatus() *ServiceStatus {
	if m != nil {
		return m.ServiceStatus
	}
	return nil
}

type PlannerInfo struct {
	// name is the planner's name, e.g. Holmes-Totem / Holmes-Storage / etc
	// ipAddress is the interface that the planner is listening on
	// port is the port that the planner is listening on
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ListenAddress string `protobuf:"bytes,2,opt,name=listenAddress" json:"listenAddress,omitempty"`
	// if a client choses to disconnect, the server should not mistake this as
	// an error but rather remove the client from its client cachex
	// additionally the server does not need to respond unless the client requests
	// a connection confirmation
	Disconnect bool `protobuf:"varint,2048,opt,name=disconnect" json:"disconnect,omitempty"`
	Connect    bool `protobuf:"varint,2049,opt,name=connect" json:"connect,omitempty"`
}

func (m *PlannerInfo) Reset()                    { *m = PlannerInfo{} }
func (m *PlannerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlannerInfo) ProtoMessage()               {}
func (*PlannerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SystemStatus struct {
	Uptime      uint64  `protobuf:"varint,1,opt,name=uptime" json:"uptime,omitempty"`
	LoadPercent float64 `protobuf:"fixed64,2,opt,name=loadPercent" json:"loadPercent,omitempty"`
	MemoryUsage uint64  `protobuf:"varint,3,opt,name=memoryUsage" json:"memoryUsage,omitempty"`
	MemoryMax   uint64  `protobuf:"varint,4,opt,name=memoryMax" json:"memoryMax,omitempty"`
	DiskUsage   uint64  `protobuf:"varint,5,opt,name=diskUsage" json:"diskUsage,omitempty"`
	DiskMax     uint64  `protobuf:"varint,6,opt,name=diskMax" json:"diskMax,omitempty"`
	Loads1      float64 `protobuf:"fixed64,7,opt,name=Loads1,json=loads1" json:"Loads1,omitempty"`
	Loads5      float64 `protobuf:"fixed64,8,opt,name=Loads5,json=loads5" json:"Loads5,omitempty"`
	Loads15     float64 `protobuf:"fixed64,9,opt,name=Loads15,json=loads15" json:"Loads15,omitempty"`
}

func (m *SystemStatus) Reset()                    { *m = SystemStatus{} }
func (m *SystemStatus) String() string            { return proto.CompactTextString(m) }
func (*SystemStatus) ProtoMessage()               {}
func (*SystemStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NetworkStatus struct {
	Interfaces []*NetworkInterface `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *NetworkStatus) Reset()                    { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()               {}
func (*NetworkStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NetworkStatus) GetInterfaces() []*NetworkInterface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type PlannerStatus struct {
	ConfigProfileName string   `protobuf:"bytes,1,opt,name=configProfileName" json:"configProfileName,omitempty"`
	Logs              []string `protobuf:"bytes,2,rep,name=logs" json:"logs,omitempty"`
	ExtraData         [][]byte `protobuf:"bytes,16,rep,name=extraData,proto3" json:"extraData,omitempty"`
}

func (m *PlannerStatus) Reset()                    { *m = PlannerStatus{} }
func (m *PlannerStatus) String() string            { return proto.CompactTextString(m) }
func (*PlannerStatus) ProtoMessage()               {}
func (*PlannerStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ServiceStatus struct {
	ConfigProfileName string   `protobuf:"bytes,1,opt,name=configProfileName" json:"configProfileName,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Port              uint32   `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Task              string   `protobuf:"bytes,4,opt,name=task" json:"task,omitempty"`
	Logs              []string `protobuf:"bytes,5,rep,name=logs" json:"logs,omitempty"`
	ExtraData         [][]byte `protobuf:"bytes,16,rep,name=extraData,proto3" json:"extraData,omitempty"`
}

func (m *ServiceStatus) Reset()                    { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()               {}
func (*ServiceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type NetworkInterface struct {
	Id        int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ip        []byte `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Netmask   []byte `protobuf:"bytes,4,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Broadcast []byte `protobuf:"bytes,5,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Scope     string `protobuf:"bytes,6,opt,name=scope" json:"scope,omitempty"`
}

func (m *NetworkInterface) Reset()                    { *m = NetworkInterface{} }
func (m *NetworkInterface) String() string            { return proto.CompactTextString(m) }
func (*NetworkInterface) ProtoMessage()               {}
func (*NetworkInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type StatusKvPair struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *StatusKvPair) Reset()                    { *m = StatusKvPair{} }
func (m *StatusKvPair) String() string            { return proto.CompactTextString(m) }
func (*StatusKvPair) ProtoMessage()               {}
func (*StatusKvPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ControlMessage struct {
	// Ack type responses are only for rarely sent messages (like planner info
	// which is only sent once at the start of a connection and is required by
	// the planner to know whether or not he's actually communicating with a
	// status endpoint).
	AckConnect    bool `protobuf:"varint,2048,opt,name=ackConnect" json:"ackConnect,omitempty"`
	AckDisconnect bool `protobuf:"varint,2049,opt,name=ackDisconnect" json:"ackDisconnect,omitempty"`
	// These byte arrays are for any potential data transferred back
	// that cannot be foreseen here (e.g. data for debugging purposes)
	ExtraData [][]byte `protobuf:"bytes,2050,rep,name=extraData,proto3" json:"extraData,omitempty"`
}

func (m *ControlMessage) Reset()                    { *m = ControlMessage{} }
func (m *ControlMessage) String() string            { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()               {}
func (*ControlMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*StatusMessage)(nil), "statusMessagesProtobuf.StatusMessage")
	proto.RegisterType((*PlannerInfo)(nil), "statusMessagesProtobuf.PlannerInfo")
	proto.RegisterType((*SystemStatus)(nil), "statusMessagesProtobuf.SystemStatus")
	proto.RegisterType((*NetworkStatus)(nil), "statusMessagesProtobuf.NetworkStatus")
	proto.RegisterType((*PlannerStatus)(nil), "statusMessagesProtobuf.PlannerStatus")
	proto.RegisterType((*ServiceStatus)(nil), "statusMessagesProtobuf.ServiceStatus")
	proto.RegisterType((*NetworkInterface)(nil), "statusMessagesProtobuf.NetworkInterface")
	proto.RegisterType((*StatusKvPair)(nil), "statusMessagesProtobuf.StatusKvPair")
	proto.RegisterType((*ControlMessage)(nil), "statusMessagesProtobuf.ControlMessage")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6f, 0xd3, 0x4e,
	0x10, 0x55, 0xbe, 0x9b, 0x49, 0x5c, 0xe5, 0xb7, 0xfa, 0xa9, 0x32, 0x12, 0x88, 0xca, 0xb4, 0x52,
	0x0f, 0x28, 0x12, 0xa0, 0x70, 0x45, 0xb4, 0x15, 0xa2, 0x2a, 0xad, 0xa2, 0x8d, 0x38, 0x70, 0xdc,
	0x3a, 0x9b, 0x60, 0xc5, 0xf6, 0x5a, 0xbb, 0x9b, 0x7e, 0xdc, 0xf8, 0xb8, 0x20, 0xce, 0xfc, 0x17,
	0xfc, 0x93, 0xcc, 0xae, 0xed, 0x64, 0x5d, 0xd2, 0x02, 0xb7, 0x9d, 0x37, 0x33, 0x2f, 0x4f, 0x33,
	0x6f, 0x62, 0xd8, 0x4e, 0xb8, 0x52, 0x6c, 0xce, 0xd5, 0x30, 0x93, 0x42, 0x0b, 0xb2, 0xa3, 0x34,
	0xd3, 0x4b, 0x75, 0x56, 0xa0, 0x63, 0x03, 0x5e, 0x2c, 0x67, 0xc1, 0xb7, 0x06, 0x78, 0x13, 0x37,
	0x45, 0xde, 0x40, 0x2f, 0x8b, 0x59, 0x9a, 0x72, 0x79, 0x92, 0xce, 0x84, 0xff, 0x69, 0xb0, 0x5b,
	0x3b, 0xe8, 0x3d, 0x7f, 0x32, 0xdc, 0x4c, 0x30, 0x1c, 0xaf, 0x6b, 0xa9, 0xdb, 0x48, 0xde, 0x42,
	0x5f, 0xdd, 0x28, 0xcd, 0x93, 0x9c, 0xde, 0xaf, 0x59, 0x9e, 0xbd, 0xbb, 0x78, 0x26, 0x4e, 0x2d,
	0xad, 0x74, 0x92, 0x53, 0xf0, 0x52, 0xae, 0xaf, 0x84, 0x5c, 0x14, 0x54, 0x75, 0x4b, 0xb5, 0x7f,
	0x17, 0xd5, 0xb9, 0x5b, 0x4c, 0xab, 0xbd, 0x86, 0xac, 0x50, 0x59, 0x90, 0x35, 0xee, 0x27, 0x1b,
	0xbb, 0xc5, 0xb4, 0xda, 0x6b, 0xc8, 0x14, 0x97, 0x97, 0x51, 0xc8, 0x0b, 0xb2, 0xe6, 0xfd, 0x64,
	0x13, 0xb7, 0x98, 0x56, 0x7b, 0x83, 0xaf, 0x35, 0xe8, 0x39, 0xd3, 0x24, 0x04, 0x9a, 0x29, 0x4b,
	0xb8, 0x1d, 0x5c, 0x97, 0xda, 0x37, 0xd9, 0x03, 0x2f, 0x8e, 0x70, 0x34, 0xe9, 0xeb, 0xe9, 0x54,
	0x22, 0xbb, 0x1d, 0x45, 0x97, 0x56, 0x41, 0xf2, 0x18, 0x60, 0x1a, 0xa9, 0x50, 0x20, 0x55, 0xa8,
	0xf3, 0x0d, 0x6e, 0x51, 0x07, 0x22, 0x0f, 0xa0, 0x53, 0x66, 0x3f, 0xe7, 0xd9, 0x32, 0x0e, 0xbe,
	0xd7, 0xa1, 0xef, 0xee, 0x82, 0xec, 0x40, 0x7b, 0x99, 0xe9, 0xa8, 0x10, 0xd2, 0xa4, 0x45, 0x44,
	0x76, 0xa1, 0x17, 0x0b, 0x36, 0x1d, 0x73, 0x19, 0xf2, 0x54, 0x5b, 0x21, 0x35, 0xea, 0x42, 0xa6,
	0x22, 0xe1, 0x89, 0x90, 0x37, 0xef, 0xcd, 0x14, 0xec, 0xa0, 0x9b, 0xd4, 0x85, 0xc8, 0x43, 0xe8,
	0xe6, 0xe1, 0x19, 0xbb, 0xb6, 0xb3, 0x6b, 0xd2, 0x35, 0x60, 0xb2, 0xa8, 0x79, 0x91, 0x77, 0xb7,
	0xf2, 0xec, 0x0a, 0x20, 0x3e, 0x74, 0x4c, 0x60, 0x3a, 0xdb, 0x36, 0x57, 0x86, 0x46, 0xf1, 0x3b,
	0x94, 0xa1, 0x9e, 0xf9, 0x1d, 0x2b, 0xaa, 0x1d, 0xdb, 0x68, 0x85, 0x8f, 0xfc, 0x2d, 0x07, 0x1f,
	0x19, 0xa6, 0xbc, 0x7e, 0xe4, 0x77, 0x6d, 0xa2, 0x93, 0x37, 0x8c, 0x82, 0x0f, 0xe0, 0x55, 0xcc,
	0x84, 0xa6, 0x86, 0x28, 0xd5, 0x5c, 0xce, 0x58, 0xc8, 0x8d, 0xa5, 0x1b, 0xb8, 0xed, 0x83, 0x3f,
	0xf8, 0xf0, 0xa4, 0x6c, 0xa0, 0x4e, 0x6f, 0x20, 0xc0, 0xab, 0x58, 0x8b, 0x3c, 0x85, 0xff, 0x70,
	0x07, 0xb3, 0x68, 0x8e, 0xfd, 0xb3, 0x28, 0xe6, 0xe7, 0xeb, 0xdd, 0xff, 0x9e, 0x30, 0xe6, 0x88,
	0xc5, 0xdc, 0xec, 0xbf, 0x61, 0xcc, 0x61, 0xde, 0x66, 0x5e, 0xfc, 0x5a, 0x4b, 0x76, 0xcc, 0x34,
	0xf3, 0x07, 0x98, 0xe8, 0xd3, 0x35, 0x10, 0xfc, 0xac, 0xe1, 0xa5, 0xbb, 0x86, 0xfb, 0xf7, 0x5f,
	0xb4, 0x76, 0xac, 0x3b, 0x76, 0x44, 0x2c, 0x13, 0x52, 0xdb, 0xd5, 0x7a, 0xd4, 0xbe, 0x0d, 0xa6,
	0x99, 0x5a, 0xd8, 0x75, 0x62, 0x9d, 0x79, 0xaf, 0xd4, 0xb6, 0xfe, 0x5a, 0xed, 0x8f, 0x1a, 0x0c,
	0x6e, 0xcf, 0x8f, 0x6c, 0x43, 0x3d, 0x9a, 0x5a, 0x85, 0x2d, 0x8a, 0xaf, 0x8d, 0x92, 0x4c, 0x4d,
	0x66, 0x05, 0xf5, 0xb1, 0x26, 0x33, 0xcb, 0xc5, 0x3f, 0x80, 0xa4, 0x54, 0xd4, 0xa7, 0x65, 0x68,
	0x04, 0x5c, 0x48, 0x5c, 0x74, 0xc8, 0x94, 0xb6, 0xf6, 0x42, 0x01, 0x2b, 0x80, 0xfc, 0x0f, 0x2d,
	0x3c, 0x97, 0x8c, 0x5b, 0x73, 0x75, 0x69, 0x1e, 0x04, 0x2f, 0xf1, 0x38, 0xec, 0xf0, 0x4e, 0x2f,
	0xc7, 0x2c, 0x92, 0x64, 0x00, 0x8d, 0x05, 0xbf, 0x29, 0x86, 0x66, 0x9e, 0xa6, 0xef, 0x92, 0xc5,
	0xcb, 0x52, 0x54, 0x1e, 0x04, 0x57, 0xb0, 0x7d, 0x24, 0x52, 0x2d, 0x45, 0x5c, 0xfe, 0xcd, 0xe2,
	0x8d, 0xb2, 0x70, 0x71, 0x74, 0xeb, 0x46, 0xd7, 0x10, 0xd9, 0x07, 0x0f, 0xa3, 0xe3, 0xf5, 0x1d,
	0x17, 0x97, 0x5a, 0x45, 0xc9, 0x23, 0x77, 0x8c, 0x5f, 0x6e, 0xcf, 0xf1, 0xf0, 0x15, 0xec, 0x0b,
	0x39, 0x1f, 0x7e, 0x14, 0x31, 0x7e, 0x10, 0xf0, 0x53, 0x80, 0xd6, 0x53, 0x51, 0x3a, 0x1f, 0x6a,
	0x81, 0x17, 0x3e, 0x4c, 0x44, 0x1a, 0x69, 0x21, 0x11, 0x38, 0xdc, 0x99, 0x6c, 0x34, 0xf1, 0x45,
	0xdb, 0x7e, 0x3f, 0x5e, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xfc, 0x59, 0xe5, 0x51, 0x06,
	0x00, 0x00,
}
